Wordpress Beğeni Eklentisi Ön Yazı

Eklentiyi, algoritma ve veritabanı bağlantısı olmadan arayüzde istediğim yerlere çıktı verebilen
bir eklenti gibi düşünerek başladım. Çıktı aldıktan sonra, aldığım çıktı değişkenine veritabanından
çektiğim verileri atayarak algoritma ile de gerekli 
kontrolleri yapacaktım.

Veritabanından çekilen yazının $content değişkeninde saklandığını öğrendim, bu değişkenin sonuna 
"Beğeni Butonu"nu sayfada gösterecek gerekli form kodlarını eklemem gerekti. Bu buton ilk aşamada
hiçbir işleve sahip değildi.

Butona işlev verebilmek için "Ajax" kullanmayı tercih ettim böylece sayfa yenilemeden veritabanına
veri gönderebilecektim. Öncelikle veritabanında tablo oluşturmalıydım, kayıtları kendi veritabanımda
saklamak için. Eklenti aktifleştirildiğinde çalışacak bir kod parçası bu tabloyu oluşturmalıydı böylece 
kullanıcıya kolaylık sağlanmış olacaktı. Örnek kodları inceledim ve $wpdb sınıfının kullanımına göz attım.
Veritabanında yazı ve kullanıcı değişkenlerinin id değerlerini veritabanında saklamayı düşündüm böylelikle
yazının başlığı değiştiğinde veya kullanıcı adı değiştiğinde kayıtlarda sıkıntı olmayacak ayrıca veritabanı
 alanları daha verimli kullanılacaktı.

Butona bir işlev vermem gerekiyordu, bu işlev veritabanına veri göndermemi sağlayacak ve yanıtı form
veya buton üzerinde bildirecekti. Buton eklemek için oluşturduğum form içerisine yazının ve kullanıcının id
değerlerini ve beğeni sorgusunun değerini gizli input ile saklamam gerekiyordu, daha sonra bu form içerisindeki
input değerlerini ajax ile veritabanına gönderecektim. Tarih verisini ise ise otomatik id gibi, veritabanı
sağlayıcısının kendisinden sağlayacaktım, bu sebeple form içinde tarih saklayacağım bir input elemanına ihtiyaç
duymadım. Bunun için ayrıca bir ajax dosyasına ihtiyacım vardı, bu ajax ile input değerlerini alarak bunları
veritabanına kayıt edecek sayfaya ilettikten sonra buton veya form üzerinden dönüt sağlayacaktım.

Bu işlevlerin aktif olabilmesi için kullanıcı giriş yapmalıydı. Bunun için kullanıcı girişi sorgulamasına
ihtiyacım vardı, bu sorguya göre eklenti buton çıktısını veya uyarı çıktısı verecekti. Kullanıcı
girişi yapıldıktan sonra ise okunan yazının kullanıcıya göre beğeni durumu veritabanından sorgulanacak
ve sonuca göre butonun value çıktısı verilecekti.

Eklenti çalışır hale geldikten sonra, eklenti için bileşen yazmam gerekiyordu. Tıpkı eklentideki gibi
bu bileşeni de algoritmasız sadece çıktı verebilen bir bileşen olarak düşündüm. Bu çıktıyı aldıktan sonra 
veritabanı sorgusuyla kullanıcının beğendiği yazıların id değerlerini listeledim önce. Daha sonra, wordpressin
id değeri girildiğinde yazı bağlantısını ve başlığını veren fonksiyonları kullanarak listeleme yaptım, bu
listelemeyi veritabanı sorgusundan 10 veri ile sınırlandırdım. Liste sonuna tüm beğenilerin listeleneceği sayfaya
yönlendiren bir bağlantı verdim ancak bu bağlantı ilk aşamada çalışmıyordu.

Tüm beğenilerin listeleneceği bir sayfaya ihtiyacım vardı bu sayfa eklentiye ait olacaktı. Öncelikle sayfa için
şablon oluşturmam  gerektiğini öğrendim, şablonun tüm temalarda hatasız çalışabilmesi için sade olmasına dikkat ettim.
Şablonu oluşturduktan sonra içerisinde php kodlarını çalıştırmam gerekiyordu ve bunun için ek olarak bir şey yapmama
gerek yoktu, php tag açıp arasına kodları  yazmam yeterliydi. Eklenti bileşeninde 10 ile sınırlandırdığım veritabanı
sorgusunu burada sınırlandırmadan kullanacak ve her satır için bir vazgeç butonu oluşturacaktım, bu buton ile beğeniden
vazgeçilebilecekti, bu buton yazı sonlarında gösterilen beğen butonu ile aynı yöntemle yani ajax ile çalışacaktı.
Bu şablonla bir sayfa oluşturacak ve bu sayfanın url adresi ile bileşen ayarlarındaki URL adresini eşitlemek gerekecekti.

Bu aşamaları yaptıktan sonra farklı tema kullanan WordPress sayfalarında kurulum yapıp, test ettim.